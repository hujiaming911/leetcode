/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if(newInterval==null){
            return intervals;
        }
        List<Interval> result=new ArrayList<>();
        int i=0;
        while(i<intervals.size()&&intervals.get(i).end<newInterval.start){
            result.add(intervals.get(i));
            i++;
        }
        while(i<intervals.size()&&intervals.get(i).start<=newInterval.end){
            newInterval.start=Math.min(intervals.get(i).start,newInterval.start);
            newInterval.end=Math.max(intervals.get(i).end,newInterval.end);
            i++;
        }
        result.add(newInterval);
        while(i<intervals.size()&&intervals.get(i).start>newInterval.start){
            result.add(intervals.get(i));
            i++;
        }
        return result;
    }
}

这个题就是新建一个Interval类，然后以这个类新建List
intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
比如说这个例子，
[3,5],[6,7],[8,10]与[4,8]最后合并成[3,10]是因为intervals里的这些元素与新的interval有交集
start和end一直在更新最小的和最大的

但是首先要保证没有交集的不会被更新，[1,2]先被放进去，[12,16]最后被放进去
