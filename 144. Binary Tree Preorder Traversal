/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 实际上就是先序遍历
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if(root==null){
            return list;
        }
        helper(root,list);
        return list;
    }
    public void helper(TreeNode root, List<Integer> list){
        if(root==null){
            return;
        }
        list.add(root.val);
        helper(root.left,list);
        helper(root.right,list);
    }
}

递归法
先左后右





class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if(root==null){
            return list;
        }
        Stack<TreeNode> stack=new Stack<>();
        stack.push(root);
        while(stack.size()!=0){
            TreeNode temp=stack.pop();
            if(temp.right!=null)stack.push(temp.right);
            if(temp.left!=null)stack.push(temp.left);
            list.add(temp.val);
        }
        return list;
        
    }
}

迭代法
用STACK   先放右边再放左边  这样配合stack 先弹出来的才是左子节点
