被X包围的O会变成X  剩下的O还是O
思路就是DFS   只有在边界上的O才不会被包围  所以当查找到边界上的O的时候  查找他的四周 如果有O 那么此O也不用变  剩下的O都需要变


class Solution {
    public void solve(char[][] board) {
        if(board.length==0||board[0].length==0){
            return;
        }
        int m=board.length;
        int n=board[0].length;
        for(int i=0;i<m;i++){
            if(board[i][0]=='O'){
                dfs(board,i,0);
            }
            if(board[i][n-1]=='O'){
                dfs(board,i,n-1);
            }
        }
        for(int i=0;i<n;i++){
            if(board[0][i]=='O'){
                dfs(board,0,i);
            }
            if(board[m-1][i]=='O'){
                dfs(board,m-1,i);
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }else if(board[i][j]=='M'){
                    board[i][j]='O';
                }
            }
        }
    }
    public void dfs(char[][] board, int i, int j){
        if(i<0||i==board.length||j<0||j==board[0].length||board[i][j]=='X'||board[i][j]=='M'){
            return;
        }
        board[i][j]='M';
        dfs(board,i+1,j);
        dfs(board,i-1,j);
        dfs(board,i,j+1);
        dfs(board,i,j-1);
        
    }
}
